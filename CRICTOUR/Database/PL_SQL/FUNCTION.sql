-- TRIGGER FUNCTION
CREATE OR REPLACE FUNCTION DELETE_TOURNAMENT()
RETURNS TRIGGER AS $$
DECLARE
    ROWS_DELETED INTEGER;
BEGIN
    -- Soft delete the tournament by moving it to the DELETED_TOURNAMENT table
    INSERT INTO DELETED_TOURNAMENT (TOURNAMENT_ID, TOURNAMENT_NAME, HOST, WINNER_TEAM_ID, NO_OF_SIXES, NO_OF_FOURS, NO_OF_HAT_TRICKS, START_DATE, END_DATE)
    VALUES (OLD.TOURNAMENT_ID, OLD.TOURNAMENT_NAME, OLD.HOST, OLD.WINNER_TEAM_ID, OLD.NO_OF_SIXES, OLD.NO_OF_FOURS, OLD.NO_OF_HAT_TRICKS, OLD.START_DATE, OLD.END_DATE);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION DELETE_TEAM()
RETURNS TRIGGER AS $$
DECLARE
    ROWS_DELETED INTEGER;
BEGIN
	-- INSERT DATA INTO DELETED_PERSON TABLE
	INSERT INTO DELETED_TEAM (TEAM_NAME, COACH_ID, CAPTAIN_ID, DELETED_AT)
	SELECT TEAM_NAME, COACH_ID, CAPTAIN_ID, CURRENT_DATE
	FROM TEAM
	WHERE TEAM_ID = OLD.TEAM_ID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION DELETE_PERSON()
RETURNS TRIGGER AS $$
BEGIN
    -- INSERT DATA INTO DELETED_PERSON TABLE
    INSERT INTO DELETED_PERSON (FIRST_NAME, LAST_NAME, NATIONALITY, DATE_OF_BIRTH, IMAGE, DELETED_AT)
    SELECT FIRST_NAME, LAST_NAME, NATIONALITY, DATE_OF_BIRTH, IMAGE, CURRENT_DATE
    FROM PERSON
    WHERE PERSONID = OLD.PERSONID;

    -- INSERT DATA INTO DELETED_PLAYER TABLE
    INSERT INTO DELETED_PLAYER (TEAM_ID, TYPE, DELETED_AT)
    SELECT TEAM_ID, TYPE, CURRENT_DATE
    FROM PLAYER
    WHERE PLAYERID = OLD.PERSONID;
	
    DELETE FROM PLAYER WHERE PLAYERID = OLD.PERSONID;

    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION UPDATE_UMPIRE_MATCHES()
RETURNS TRIGGER AS $$
DECLARE
    MATCH_COUNT INTEGER;
BEGIN
    -- COUNT THE NUMBER OF MATCHES CONDUCTED BY THE UMPIRE
    SELECT COUNT(*)
    INTO MATCH_COUNT
    FROM MATCH_UMPIRE
    WHERE UMPIRE_ID = NEW.UMPIRE_ID;

    -- UPDATE THE NO_OF_MATCH_CONDUCTED COLUMN IN THE UMPIRE TABLE
    UPDATE UMPIRE
    SET NO_OF_MATCH_CONDUCTED = MATCH_COUNT
    WHERE PERSONID = NEW.UMPIRE_ID;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION DELETE_RELATED_SCORECARDS()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM SCORECARD WHERE MATCH_ID = OLD.MATCH_ID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


-- NORMAL FUNCTION
CREATE OR REPLACE FUNCTION CALCULATE_TEAM_POINTS(TID INTEGER)
RETURNS INTEGER AS $$
DECLARE
    TOTAL_POINTS INTEGER := 0;
    CUR_PLAYERID INTEGER;  -- Rename the loop variable to avoid conflict
BEGIN
    FOR CUR_PLAYERID IN (SELECT PLAYERID FROM PLAYER WHERE TEAM_ID = TID)
    LOOP
        TOTAL_POINTS := TOTAL_POINTS +
            (SELECT COALESCE(SUM(RUN_SCORED), 0) * 0.1 +    -- 0.1 POINT FOR EACH RUN SCORED
        			COALESCE(SUM(WICKET_TAKEN), 0) * 10 +   -- 10 POINTS FOR EACH WICKET TAKEN
        			COALESCE(SUM(RUN_GIVEN), 0) * -0.1 +    -- 0.1 POINT DEDUCTION FOR EACH RUN
        			COALESCE(SUM(MAIDEN_OVERS), 0) * 5 +    -- 5 POINTS PER MAIDEN OVER
        			COALESCE(SUM(TOTAL_SIXES_HIT), 0) * 2 + -- 2 POINTS FOR EACH SIX HIT
        			COALESCE(SUM(TOTAL_FOURS_HIT), 0) * 1   -- 1 POINT FOR EACH FOUR HIT
            FROM SCORECARD WHERE PLAYER_ID = CUR_PLAYERID); -- Use the loop variable
    END LOOP;
    RETURN TOTAL_POINTS;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION DREAM11_PLAYERS_POINT(PID INTEGER)
RETURNS INTEGER AS
$$
DECLARE
    TOTAL_POINTS INTEGER;
BEGIN
    -- INITIALIZE TOTAL POINTS FOR THE PLAYER
    TOTAL_POINTS := 0;
    -- CALCULATE POINTS BASED ON THE PLAYER'S PERFORMANCE IN THE SCORECARD TABLE
    SELECT 
        COALESCE(SUM(RUN_SCORED), 0) * 0.1 +    -- 0.1 POINT FOR EACH RUN SCORED
        COALESCE(SUM(WICKET_TAKEN), 0) * 10 +   -- 10 POINTS FOR EACH WICKET TAKEN
        COALESCE(SUM(RUN_GIVEN), 0) * -0.1 +    -- 0.1 POINT DEDUCTION FOR EACH RUN
        COALESCE(SUM(MAIDEN_OVERS), 0) * 5 +    -- 5 POINTS PER MAIDEN OVER
        COALESCE(SUM(TOTAL_SIXES_HIT), 0) * 2 + -- 2 POINTS FOR EACH SIX HIT
        COALESCE(SUM(TOTAL_FOURS_HIT), 0) * 1   -- 1 POINT FOR EACH FOUR HIT
    INTO TOTAL_POINTS
    FROM SCORECARD
    WHERE PLAYER_ID = PID;
    RETURN TOTAL_POINTS;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION COMPARE_TEAMS_IN_TOURNAMENT(TID INTEGER)
RETURNS TABLE (
    TEAM_ID INTEGER,
    TEAM_NAME VARCHAR(255),
    TOTAL_POINTS INTEGER
) AS $$
DECLARE
    TEAM_RECORD RECORD;
BEGIN
    FOR TEAM_RECORD IN (
        SELECT T.TEAM_ID, T.TEAM_NAME
        FROM TEAM T
        JOIN TEAM_PARTICIPATION TP ON T.TEAM_ID = TP.TEAM_ID
        WHERE TP.TOURNAMENT_ID = TID
    )
    LOOP
        RETURN QUERY (
            SELECT TEAM_RECORD.TEAM_ID AS TEAM_ID, TEAM_RECORD.TEAM_NAME AS TEAM_NAME, CALCULATE_TEAM_POINTS(TEAM_RECORD.TEAM_ID) AS TOTAL_POINTS
        );
    END LOOP;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION CALCULATE_TOTAL_DREAM11_POINTS()
RETURNS INTEGER AS
$$
DECLARE
    TOTAL_TEAM_POINTS INTEGER := 0;
    CUR_PLAYERID INTEGER;
BEGIN
    FOR CUR_PLAYERID IN (SELECT PLAYERID FROM DREAM11)
    LOOP
        TOTAL_TEAM_POINTS := TOTAL_TEAM_POINTS + DREAM11_PLAYERS_POINT(CUR_PLAYERID);
    END LOOP;
    RETURN TOTAL_TEAM_POINTS;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_TEAM_ID(TEAM_NAME_PARAM VARCHAR) 
RETURNS INTEGER AS $$
DECLARE
    TEAM_ID_RESULT INTEGER;
BEGIN
    -- FETCH THE TEAM ID BASED ON THE TEAM NAME
    SELECT TEAM_ID INTO TEAM_ID_RESULT
    FROM TEAM
    WHERE UPPER(TEAM_NAME) = UPPER(TEAM_NAME_PARAM);

    -- RETURN THE TEAM ID
    RETURN TEAM_ID_RESULT;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_PLAYER_ID(PLAYER_NAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    PLAYER_ID INTEGER;
BEGIN
    SELECT PLAYERID INTO PLAYER_ID
    FROM PERSON
    JOIN PLAYER ON PERSON.PERSONID = PLAYER.PLAYERID
    WHERE UPPER(CONCAT(FIRST_NAME, ' ', LAST_NAME)) = UPPER(PLAYER_NAME);

    RETURN PLAYER_ID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_COACH_ID(COACH_NAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    COACH_ID INTEGER;
BEGIN
    SELECT COACH.PERSONID INTO COACH_ID
    FROM PERSON
    JOIN COACH ON PERSON.PERSONID = COACH.PERSONID
    WHERE UPPER(CONCAT(FIRST_NAME, ' ', LAST_NAME)) = UPPER(COACH_NAME);

    RETURN COACH_ID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_TOURNAMENT_ID(TNAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    TID INTEGER;
BEGIN
    SELECT TOURNAMENT_ID INTO TID
    FROM TOURNAMENT
    WHERE UPPER(TOURNAMENT_NAME) = UPPER(TNAME);

    RETURN TID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_DELETED_TOURNAMENT_ID(TNAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    TID INTEGER;
BEGIN
    SELECT TOURNAMENT_ID INTO TID
    FROM DELETED_TOURNAMENT
    WHERE UPPER(TOURNAMENT_NAME) = UPPER(TNAME);

    RETURN TID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_DELETED_TEAM_ID(TNAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    TID INTEGER;
BEGIN
    SELECT TEAM_ID INTO TID
    FROM DELETED_TEAM
    WHERE UPPER(TEAM_NAME) = UPPER(TNAME);

    RETURN TID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_DELETED_PLAYER_ID(PNAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    PID INTEGER;
BEGIN
    SELECT PLAYER.PLAYERID INTO PID
    FROM DELETED_PERSON
    JOIN DELETED_PLAYER
    ON DELETED_PLAYER.PLAYERID = DELETED_PERSON.PERSONID
    WHERE UPPER(CONCAT(FIRST_NAME, ' ', LAST_NAME)) = UPPER(PNAME);

    RETURN PID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION GET_DELETED_PERSON_ID(PNAME VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    PID INTEGER;
BEGIN
    SELECT PERSONID INTO PID
    FROM DELETED_PERSON
    WHERE UPPER(CONCAT(FIRST_NAME, ' ', LAST_NAME)) = UPPER(PNAME);

    RETURN PID;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION RESTORE_TOURNAMENT(TID INTEGER)
RETURNS INTEGER AS $$
DECLARE
    SOFT_DELETE_TIME TIMESTAMP; -- Change to TIMESTAMP type
    CURRENTTIME TIMESTAMP;
    TIME_DIFF INTEGER;
BEGIN
    -- GET THE SOFT DELETION TIME OF THE TOURNAMENT
    SELECT DELETED_AT INTO SOFT_DELETE_TIME
    FROM DELETED_TOURNAMENT
    WHERE TOURNAMENT_ID = TID;

    -- GET THE CURRENT TIME
    SELECT CURRENT_TIMESTAMP INTO CURRENTTIME;

    -- CALCULATE THE TIME DIFFERENCE
    TIME_DIFF := EXTRACT(EPOCH FROM (CURRENTTIME - SOFT_DELETE_TIME)) / 60;

    -- CHECK IF THE SOFT DELETION TIME HAS EXPIRED (SET YOUR DESIRED INTERVAL HERE, E.G., '3 MINUTES')
    IF TIME_DIFF > 3 THEN
        -- PERMANENTLY DELETE THE TOURNAMENT
        DELETE FROM DELETED_TOURNAMENT WHERE TOURNAMENT_ID = TID;
        RAISE NOTICE 'TOURNAMENT ID % PERMANENTLY DELETED.', TID;
        RETURN 0;
    ELSE
        -- RESTORE THE TOURNAMENT TO THE TOURNAMENT TABLE
        INSERT INTO TOURNAMENT (TOURNAMENT_NAME, HOST, WINNER_TEAM_ID, NO_OF_SIXES, NO_OF_FOURS, NO_OF_HAT_TRICKS, START_DATE, END_DATE)
        SELECT TOURNAMENT_NAME, HOST, WINNER_TEAM_ID, NO_OF_SIXES, NO_OF_FOURS, NO_OF_HAT_TRICKS, START_DATE, END_DATE
        FROM DELETED_TOURNAMENT
        WHERE TOURNAMENT_ID = TID;
        
        -- DELETE THE TOURNAMENT FROM THE DELETED_TOURNAMENT TABLE
        DELETE FROM DELETED_TOURNAMENT WHERE TOURNAMENT_ID = TID;

        RAISE NOTICE 'TOURNAMENT ID % RESTORED.', TID;
        RETURN 1;
    END IF;
END;
$$ LANGUAGE plpgsql;


-- // THE ABOVE CODE IS CREATING A POSTGRESQL FUNCTION NAMED `RESTORE_TEAM` THAT TAKES AN INTEGER
-- // PARAMETER `TID` REPRESENTING A TEAM ID.
CREATE OR REPLACE FUNCTION RESTORE_TEAM(TID INTEGER)
RETURNS INTEGER AS $$
DECLARE
    SOFT_DELETE_TIME TIMESTAMP;
    CURRENTTIME TIMESTAMP;
    TIME_DIFF INTEGER;
BEGIN
    -- GET THE SOFT DELETION TIME OF THE TEAM
    SELECT DELETED_AT INTO SOFT_DELETE_TIME
    FROM DELETED_TEAM
    WHERE TEAM_ID = TID;

    -- GET THE CURRENT TIME
    SELECT CURRENT_TIMESTAMP INTO CURRENTTIME;

    -- CALCULATE THE TIME DIFFERENCE
    TIME_DIFF := EXTRACT(EPOCH FROM (CURRENTTIME - SOFT_DELETE_TIME)) / 60;

    -- CHECK IF THE SOFT DELETION TIME HAS EXPIRED (SET YOUR DESIRED INTERVAL HERE, E.G., '7 DAYS')
    IF TIME_DIFF > 3 THEN
        -- PERMANENTLY DELETE THE TEAM
        DELETE FROM DELETED_TEAM WHERE TEAM_ID = TID;
        RAISE NOTICE 'TEAM ID % PERMANENTLY DELETED.', TID;
        RETURN 0;
    ELSE
        -- RESTORE THE TEAM TO THE TEAM TABLE
        INSERT INTO TEAM (TEAM_NAME, COACH_ID, CAPTAIN_ID)
        SELECT TEAM_NAME, COACH_ID, CAPTAIN_ID
        FROM DELETED_TEAM
        WHERE TEAM_ID = TID;
        
        -- DELETE THE TEAM FROM THE DELETED_TEAM TABLE
        DELETE FROM DELETED_TEAM WHERE TEAM_ID = TID;

        RAISE NOTICE 'TEAM ID % RESTORED.', TID;
        RETURN 1;
    END IF;
END;
$$ LANGUAGE plpgsql;


-- // THE ABOVE CODE IS CREATING A POSTGRESQL FUNCTION NAMED RESTORE_PLAYER THAT RESTORES A PERSON AND
-- // THEIR RELATED PLAYER FROM DELETED TABLES BACK TO THE ORIGINAL TABLES UNDER CERTAIN CONDITIONS. HERE
-- // IS A BREAKDOWN OF THE FUNCTIONALITY:
CREATE OR REPLACE FUNCTION RESTORE_PLAYER(PLID INTEGER, PRID INTEGER)
RETURNS INTEGER AS $$
DECLARE
    SOFT_DELETE_TIME TIMESTAMP;
    CURRENTTIME TIMESTAMP := CURRENT_TIMESTAMP; -- INITIALIZE CURRENT_TIME TO THE CURRENT DATE
    TIME_DIFF INTEGER;
BEGIN
    -- GET THE SOFT DELETION TIME OF THE PERSON
    SELECT DELETED_AT INTO SOFT_DELETE_TIME
    FROM DELETED_PERSON
    WHERE PERSONID = PRID;

    -- CALCULATE THE TIME DIFFERENCE
    TIME_DIFF := EXTRACT(EPOCH FROM (CURRENTTIME - SOFT_DELETE_TIME)) / 60;

    -- CHECK IF THE SOFT DELETION TIME HAS EXPIRED (SET YOUR DESIRED INTERVAL HERE, E.G., '7 DAYS')
    IF TIME_DIFF > 3 THEN
        -- PERMANENTLY DELETE THE PERSON AND RELATED PLAYER
        DELETE FROM DELETED_PERSON WHERE PERSONID = PRID;
        DELETE FROM DELETED_PLAYER WHERE PLAYERID = PLID;
        RAISE NOTICE 'PERSON AND RELATED PLAYER ID % PERMANENTLY DELETED.', PRID;
        RETURN 0;
    ELSE
        -- RESTORE THE PERSON TO THE PERSON TABLE
        INSERT INTO PERSON (FIRST_NAME, LAST_NAME, NATIONALITY, DATE_OF_BIRTH, IMAGE)
        SELECT FIRST_NAME, LAST_NAME, NATIONALITY, DATE_OF_BIRTH, IMAGE
        FROM DELETED_PERSON
        WHERE PERSONID = PRID;

        -- RESTORE THE PLAYER TO THE PLAYER TABLE
        INSERT INTO PLAYER (TEAM_ID, TYPE)
        SELECT TEAM_ID, TYPE
        FROM DELETED_PLAYER
        WHERE PLAYERID = PLID;

        -- DELETE THE PERSON AND PLAYER FROM THE DELETED TABLES
        DELETE FROM DELETED_PERSON WHERE PERSONID = PRID;
        DELETE FROM DELETED_PLAYER WHERE PLAYERID = PLID;

        RAISE NOTICE 'PERSON AND RELATED PLAYER ID % RESTORED.', PRID;
        RETURN 1;
    END IF;
END;
$$ LANGUAGE plpgsql;
