-- TRIGGER FUNCTION
CREATE OR REPLACE FUNCTION DELETE_TOURNAMENT()
RETURNS TRIGGER AS $$
DECLARE
    ROWS_DELETED INTEGER;
BEGIN
    DELETE FROM SCORECARD WHERE MATCH_ID IN (SELECT MATCH_ID FROM MATCH WHERE TOURNAMENT_ID = OLD.TOURNAMENT_ID);
    GET DIAGNOSTICS ROWS_DELETED = ROW_COUNT;
    IF ROWS_DELETED = 0 THEN
        RAISE NOTICE 'NO MATCHING ROWS FOUND IN SCORECARD FOR TOURNAMENT_ID %', OLD.TOURNAMENT_ID;
    END IF;

    DELETE FROM MATCH WHERE TOURNAMENT_ID = OLD.TOURNAMENT_ID;
    GET DIAGNOSTICS ROWS_DELETED = ROW_COUNT;
    IF ROWS_DELETED = 0 THEN
        RAISE NOTICE 'NO MATCHING ROWS FOUND IN MATCH FOR TOURNAMENT_ID %', OLD.TOURNAMENT_ID;
    END IF;

    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION UPDATE_UMPIRE_MATCHES()
RETURNS TRIGGER AS $$
DECLARE
    MATCH_COUNT INTEGER;
BEGIN
    -- COUNT THE NUMBER OF MATCHES CONDUCTED BY THE UMPIRE
    SELECT COUNT(*)
    INTO MATCH_COUNT
    FROM MATCH_UMPIRE
    WHERE UMPIRE_ID = NEW.UMPIRE_ID;

    -- UPDATE THE NO_OF_MATCH_CONDUCTED COLUMN IN THE UMPIRE TABLE
    UPDATE UMPIRE
    SET NO_OF_MATCH_CONDUCTED = MATCH_COUNT
    WHERE PERSONID = NEW.UMPIRE_ID;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION DELETE_RELATED_SCORECARDS()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM SCORECARD WHERE MATCH_ID = OLD.MATCH_ID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


-- NORMAL FUNCTION
CREATE OR REPLACE FUNCTION CALCULATE_TEAM_POINTS(TID INTEGER)
RETURNS INTEGER AS $$
DECLARE
    TOTAL_POINTS INTEGER := 0;
    CUR_PLAYERID INTEGER;  -- Rename the loop variable to avoid conflict
BEGIN
    FOR CUR_PLAYERID IN (SELECT PLAYERID FROM PLAYER WHERE TEAM_ID = TID)
    LOOP
        TOTAL_POINTS := TOTAL_POINTS +
            (SELECT COALESCE(SUM(RUN_SCORED), 0) * 0.1 +    -- 0.1 POINT FOR EACH RUN SCORED
        			COALESCE(SUM(WICKET_TAKEN), 0) * 10 +   -- 10 POINTS FOR EACH WICKET TAKEN
        			COALESCE(SUM(RUN_GIVEN), 0) * -0.1 +    -- 0.1 POINT DEDUCTION FOR EACH RUN
        			COALESCE(SUM(MAIDEN_OVERS), 0) * 5 +    -- 5 POINTS PER MAIDEN OVER
        			COALESCE(SUM(TOTAL_SIXES_HIT), 0) * 2 + -- 2 POINTS FOR EACH SIX HIT
        			COALESCE(SUM(TOTAL_FOURS_HIT), 0) * 1   -- 1 POINT FOR EACH FOUR HIT
            FROM SCORECARD WHERE PLAYER_ID = CUR_PLAYERID); -- Use the loop variable
    END LOOP;
    RETURN TOTAL_POINTS;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION DREAM11_PLAYERS_POINT(PID INTEGER)
RETURNS INTEGER AS
$$
DECLARE
    TOTAL_POINTS INTEGER;
BEGIN
    -- INITIALIZE TOTAL POINTS FOR THE PLAYER
    TOTAL_POINTS := 0;
    -- CALCULATE POINTS BASED ON THE PLAYER'S PERFORMANCE IN THE SCORECARD TABLE
    SELECT 
        COALESCE(SUM(RUN_SCORED), 0) * 0.1 +    -- 0.1 POINT FOR EACH RUN SCORED
        COALESCE(SUM(WICKET_TAKEN), 0) * 10 +   -- 10 POINTS FOR EACH WICKET TAKEN
        COALESCE(SUM(RUN_GIVEN), 0) * -0.1 +    -- 0.1 POINT DEDUCTION FOR EACH RUN
        COALESCE(SUM(MAIDEN_OVERS), 0) * 5 +    -- 5 POINTS PER MAIDEN OVER
        COALESCE(SUM(TOTAL_SIXES_HIT), 0) * 2 + -- 2 POINTS FOR EACH SIX HIT
        COALESCE(SUM(TOTAL_FOURS_HIT), 0) * 1   -- 1 POINT FOR EACH FOUR HIT
    INTO TOTAL_POINTS
    FROM SCORECARD
    WHERE PLAYER_ID = PID;
    RETURN TOTAL_POINTS;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION COMPARE_TEAMS_IN_TOURNAMENT(TID INTEGER)
RETURNS TABLE (
    TEAM_ID INTEGER,
    TEAM_NAME VARCHAR(255),
    TOTAL_POINTS INTEGER
) AS $$
DECLARE
    TEAM_RECORD RECORD;
BEGIN
    FOR TEAM_RECORD IN (
        SELECT T.TEAM_ID, T.TEAM_NAME
        FROM TEAM T
        JOIN TEAM_PARTICIPATION TP ON T.TEAM_ID = TP.TEAM_ID
        WHERE TP.TOURNAMENT_ID = TID
    )
    LOOP
        RETURN QUERY (
            SELECT TEAM_RECORD.TEAM_ID AS TEAM_ID, TEAM_RECORD.TEAM_NAME AS TEAM_NAME, CALCULATE_TEAM_POINTS(TEAM_RECORD.TEAM_ID) AS TOTAL_POINTS
        );
    END LOOP;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION CALCULATE_TOTAL_DREAM11_POINTS()
RETURNS INTEGER AS
$$
DECLARE
    TOTAL_TEAM_POINTS INTEGER := 0;
    CUR_PLAYERID INTEGER;
BEGIN
    FOR CUR_PLAYERID IN (SELECT PLAYERID FROM DREAM11)
    LOOP
        TOTAL_TEAM_POINTS := TOTAL_TEAM_POINTS + DREAM11_PLAYERS_POINT(CUR_PLAYERID);
    END LOOP;
    RETURN TOTAL_TEAM_POINTS;
END;
$$ LANGUAGE plpgsql;
